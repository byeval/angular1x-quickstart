"use strict";function routerConfig(e,t,r){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",e.defaults.timeout=1e4,e.defaults.headers.post={"Content-Type":"application/x-www-form-urlencoded"},t.when("","/").when("/","/view1").otherwise("/404"),r.state("view1",{name:"view1",url:"/view1",views:{"":{templateUrl:"view1.html",controller:"ViewOneCtrl",controllerAs:"vm"}},data:{title:"viewone"}}).state("view2",{name:"view2",url:"/view2",views:{"":{templateUrl:"view2.html",controller:"ViewTwoCtrl",controllerAs:"vm"}},data:{title:"viewtwo"}})}angular.module("myApp",["ngAnimate","ngSanitize","ui.router","myApp.controller","myApp.service"]).run(["$rootScope","$state","$stateParams",function(e,t,r){var o=/msie (\d+\.\d+)/i.test(navigator.userAgent)?document.documentMode||+RegExp.$1:void 0;o&&10>o&&(window.location="/sorry-for-old-ie.html"),e.$state=t,e.$stateParams=r}]),routerConfig.$inject=["$httpProvider","$urlRouterProvider","$stateProvider"],angular.module("myApp").config(routerConfig),angular.module("myApp.service",["myApp.service.viewService"]),function(){function e(){return{title:"Hello World"}}function t(){function e(){return"Hello angin! I'm view2."}var t={getTitle:e};return t}angular.module("myApp.service.viewService",[]).factory("ViewOneService",e).factory("ViewTwoService",t)}(),angular.module("myApp.controller",["myApp.controller.viewCtrl"]),function(){function e(e){var t=this;t.title=e.title}function t(e,t){function r(){t.go("view1")}var o=this;o.title=e.getTitle(),o.goback=r}e.$inject=["ViewOneService"],t.$inject=["ViewTwoService","$state"],angular.module("myApp.controller.viewCtrl",[]).controller("ViewOneCtrl",e).controller("ViewTwoCtrl",t)}(),angular.module("myApp.controller").run(["$templateCache",function(e){e.put("view1.html",'<h1>{{vm.title}}</h1>\n<p><a ui-sref="view2">view2</a></p>'),e.put("view2.html",'<h1>{{vm.title}}</h1>\n<p><button ng-click="vm.goback()">goback</button></p>')}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInJvdXRlcy5qcyIsIm1haW4uanMiLCJzZXJ2aWNlLmpzIiwidmlldy5zZXJ2aWNlLmpzIiwiY29udHJvbGxlci5qcyIsInZpZXcuY29udHJvbGxlci5qcyIsInRlbXBsYXRlcy5qcyJdLCJuYW1lcyI6WyJyb3V0ZXJDb25maWciLCIkaHR0cFByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHN0YXRlUHJvdmlkZXIiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJnZXQiLCJ0aW1lb3V0IiwicG9zdCIsIkNvbnRlbnQtVHlwZSIsIndoZW4iLCJvdGhlcndpc2UiLCJzdGF0ZSIsIm5hbWUiLCJ1cmwiLCJ2aWV3cyIsIiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImRhdGEiLCJ0aXRsZSIsImFuZ3VsYXIiLCJtb2R1bGUiLCJydW4iLCIkcm9vdFNjb3BlIiwiJHN0YXRlIiwiJHN0YXRlUGFyYW1zIiwiaWUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZG9jdW1lbnQiLCJkb2N1bWVudE1vZGUiLCJSZWdFeHAiLCJ1bmRlZmluZWQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsIiRpbmplY3QiLCJjb25maWciLCJWaWV3T25lU2VydmljZSIsIlZpZXdUd29TZXJ2aWNlIiwiZ2V0VGl0bGUiLCJzZXJ2aWNlIiwiZmFjdG9yeSIsIlZpZXdPbmVDdHJsIiwidm0iLCJ0aGlzIiwiVmlld1R3b0N0cmwiLCJnb2JhY2siLCJnbyIsIiR0ZW1wbGF0ZUNhY2hlIiwicHV0Il0sIm1hcHBpbmdzIjoiQUFBQSxZQ1FBLFNBQVNBLGNBQWFDLEVBQWVDLEVBQW9CQyxHQUNoREYsRUFBY0csU0FBU0MsUUFBUUMsTUFDaENMLEVBQWNHLFNBQVNDLFFBQVFDLFFBRW5DTCxFQUFjRyxTQUFTQyxRQUFRQyxJQUFJLGlCQUFtQixXQUN0REwsRUFBY0csU0FBU0MsUUFBUUMsSUFBSSxPQUFZLFdBRS9DTCxFQUFjRyxTQUFTRyxRQUFVLElBQ2pDTixFQUFjRyxTQUFTQyxRQUFRRyxNQUMzQkMsZUFBZ0IscUNBR3BCUCxFQUNLUSxLQUFLLEdBQUksS0FDVEEsS0FBSyxJQUFLLFVBQ1ZDLFVBQVUsUUFFZlIsRUFDS1MsTUFBTSxTQUNIQyxLQUFNLFFBQ05DLElBQUssU0FDTEMsT0FDSUMsSUFDSUMsWUFBYSxhQUNiQyxXQUFZLGNBQ1pDLGFBQWMsT0FHdEJDLE1BQ0lDLE1BQU8sYUFHZFQsTUFBTSxTQUNIQyxLQUFNLFFBQ05DLElBQUssU0FDTEMsT0FDSUMsSUFDSUMsWUFBYSxhQUNiQyxXQUFZLGNBQ1pDLGFBQWMsT0FHdEJDLE1BQ0lDLE1BQU8sYURqRHZCQyxRQUNLQyxPQUFPLFNBQ0osWUFDQSxhQUNBLFlBQ0EsbUJBQ0Esa0JBRUhDLEtBQ0ksYUFBYyxTQUFVLGVBQ3JCLFNBQVNDLEVBQVlDLEVBQVFDLEdBQ3pCLEdBQUlDLEdBQUssbUJBQW1CQyxLQUFLQyxVQUFVQyxXQUFjQyxTQUFTQyxlQUFpQkMsT0FBTyxHQUFZQyxNQUNsR1AsSUFBVyxHQUFMQSxJQUNOUSxPQUFPQyxTQUFXLDBCQUd0QlosRUFBV0MsT0FBU0EsRUFDcEJELEVBQVdFLGFBQWVBLEtFSzFDM0IsYUFBYXNDLFNBQVcsZ0JBQWlCLHFCQUFzQixrQkRuQi9EaEIsUUFBUUMsT0FBTyxTQUNWZ0IsT0FBT3ZDLGNFSlpzQixRQUFRQyxPQUFPLGlCQUNYLDhCQ0ZKLFdBT0ksUUFBU2lCLEtBQ0wsT0FDSW5CLE1BQU8sZUFJZixRQUFTb0IsS0FPTCxRQUFTQyxLQUNMLE1BQU8sMEJBUFgsR0FBSUMsSUFDQUQsU0FBVUEsRUFHZCxPQUFPQyxHQWZYckIsUUFBUUMsT0FBTyxnQ0FDVnFCLFFBQVEsaUJBQWtCSixHQUMxQkksUUFBUSxpQkFBa0JILE1DSm5DbkIsUUFBUUMsT0FBTyxvQkFDWCw4QkNGSixXQVNJLFFBQVNzQixHQUFZTCxHQUNqQixHQUFJTSxHQUFLQyxJQUNURCxHQUFHekIsTUFBUW1CLEVBQWVuQixNQUc5QixRQUFTMkIsR0FBWVAsRUFBZ0JmLEdBS2pDLFFBQVN1QixLQUNMdkIsRUFBT3dCLEdBQUcsU0FMZCxHQUFJSixHQUFLQyxJQUNURCxHQUFHekIsTUFBUW9CLEVBQWVDLFdBQzFCSSxFQUFHRyxPQUFTQSxFSjBHaEJKLEVBQVlQLFNBQVcsa0JBQ3ZCVSxFQUFZVixTQUFXLGlCQUFrQixVSXpIekNoQixRQUNLQyxPQUFPLGdDQUNQTCxXQUFXLGNBQWUyQixHQUMxQjNCLFdBQVcsY0FBZThCLE1DUG5DMUIsUUFBUUMsT0FBTyxvQkFBb0JDLEtBQUssaUJBQWtCLFNBQVMyQixHQUFpQkEsRUFBZUMsSUFBSSxhQUFhLDhEQUNwSEQsRUFBZUMsSUFBSSxhQUFhIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ215QXBwJywgW1xuICAgICAgICAnbmdBbmltYXRlJyxcbiAgICAgICAgJ25nU2FuaXRpemUnLFxuICAgICAgICAndWkucm91dGVyJyxcbiAgICAgICAgJ215QXBwLmNvbnRyb2xsZXInLFxuICAgICAgICAnbXlBcHAuc2VydmljZSdcbiAgICBdKVxuICAgIC5ydW4oXG4gICAgICAgIFsnJHJvb3RTY29wZScsICckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzdGF0ZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGllID0gL21zaWUgKFxcZCtcXC5cXGQrKS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgPyAoZG9jdW1lbnQuZG9jdW1lbnRNb2RlIHx8ICtSZWdFeHBbJ1xceDI0MSddKSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIGlmIChpZSAmJiBpZSA8IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IFwiL3NvcnJ5LWZvci1vbGQtaWUuaHRtbFwiXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kc3RhdGUgPSAkc3RhdGVcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRzdGF0ZVBhcmFtcyA9ICRzdGF0ZVBhcmFtc1xuICAgICAgICAgICAgfVxuICAgICAgICBdKVxuIiwiOyhmdW5jdGlvbigpe1xuXG59KSgpXG4ndXNlIHN0cmljdCdcblxuYW5ndWxhci5tb2R1bGUoJ215QXBwJylcbiAgICAuY29uZmlnKHJvdXRlckNvbmZpZylcblxuZnVuY3Rpb24gcm91dGVyQ29uZmlnKCRodHRwUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJHN0YXRlUHJvdmlkZXIpIHtcbiAgICBpZiAoISRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQpIHtcbiAgICAgICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldCA9IHt9XG4gICAgfVxuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ0NhY2hlLUNvbnRyb2wnXSA9ICduby1jYWNoZSdcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydQcmFnbWEnXSA9ICduby1jYWNoZSdcblxuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMudGltZW91dCA9IDEwMDAwXG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnBvc3QgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgIH1cblxuICAgICR1cmxSb3V0ZXJQcm92aWRlclxuICAgICAgICAud2hlbignJywgJy8nKVxuICAgICAgICAud2hlbignLycsICcvdmlldzEnKVxuICAgICAgICAub3RoZXJ3aXNlKCcvNDA0JylcblxuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgIC5zdGF0ZSgndmlldzEnLCB7XG4gICAgICAgICAgICBuYW1lOiAndmlldzEnLFxuICAgICAgICAgICAgdXJsOiAnL3ZpZXcxJyxcbiAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgJyc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3MS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZpZXdPbmVDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ3ZpZXdvbmUnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgndmlldzInLCB7XG4gICAgICAgICAgICBuYW1lOiAndmlldzInLFxuICAgICAgICAgICAgdXJsOiAnL3ZpZXcyJyxcbiAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgJyc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3Mi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZpZXdUd29DdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ3ZpZXd0d28nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbXlBcHAnLCBbXG4gICAgICAgICduZ0FuaW1hdGUnLFxuICAgICAgICAnbmdTYW5pdGl6ZScsXG4gICAgICAgICd1aS5yb3V0ZXInLFxuICAgICAgICAnbXlBcHAuY29udHJvbGxlcicsXG4gICAgICAgICdteUFwcC5zZXJ2aWNlJ1xuICAgIF0pXG4gICAgLnJ1bihcbiAgICAgICAgWyckcm9vdFNjb3BlJywgJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLFxuICAgICAgICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWUgPSAvbXNpZSAoXFxkK1xcLlxcZCspL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA/IChkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgK1JlZ0V4cFsnXFx4MjQxJ10pIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgaWYgKGllICYmIGllIDwgMTApIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gXCIvc29ycnktZm9yLW9sZC1pZS5odG1sXCJcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRzdGF0ZSA9ICRzdGF0ZVxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJHN0YXRlUGFyYW1zID0gJHN0YXRlUGFyYW1zXG4gICAgICAgICAgICB9XG4gICAgICAgIF0pXG5cblxucm91dGVyQ29uZmlnLiRpbmplY3QgPSBbXCIkaHR0cFByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsIFwiJHN0YXRlUHJvdmlkZXJcIl07OyhmdW5jdGlvbigpe1xuXG59KSgpXG4ndXNlIHN0cmljdCdcblxuYW5ndWxhci5tb2R1bGUoJ215QXBwJylcbiAgICAuY29uZmlnKHJvdXRlckNvbmZpZylcblxuZnVuY3Rpb24gcm91dGVyQ29uZmlnKCRodHRwUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJHN0YXRlUHJvdmlkZXIpIHtcbiAgICBpZiAoISRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQpIHtcbiAgICAgICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldCA9IHt9XG4gICAgfVxuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ0NhY2hlLUNvbnRyb2wnXSA9ICduby1jYWNoZSdcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydQcmFnbWEnXSA9ICduby1jYWNoZSdcblxuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMudGltZW91dCA9IDEwMDAwXG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnBvc3QgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgIH1cblxuICAgICR1cmxSb3V0ZXJQcm92aWRlclxuICAgICAgICAud2hlbignJywgJy8nKVxuICAgICAgICAud2hlbignLycsICcvdmlldzEnKVxuICAgICAgICAub3RoZXJ3aXNlKCcvNDA0JylcblxuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgIC5zdGF0ZSgndmlldzEnLCB7XG4gICAgICAgICAgICBuYW1lOiAndmlldzEnLFxuICAgICAgICAgICAgdXJsOiAnL3ZpZXcxJyxcbiAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgJyc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3MS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZpZXdPbmVDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ3ZpZXdvbmUnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgndmlldzInLCB7XG4gICAgICAgICAgICBuYW1lOiAndmlldzInLFxuICAgICAgICAgICAgdXJsOiAnL3ZpZXcyJyxcbiAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgJyc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3Mi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZpZXdUd29DdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ3ZpZXd0d28nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbn1cblxuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnbXlBcHAuc2VydmljZScsIFtcbiAgICAnbXlBcHAuc2VydmljZS52aWV3U2VydmljZSdcbl0pXG5cbjtcbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAuc2VydmljZS52aWV3U2VydmljZScsIFtdKVxuICAgICAgICAuZmFjdG9yeSgnVmlld09uZVNlcnZpY2UnLCBWaWV3T25lU2VydmljZSlcbiAgICAgICAgLmZhY3RvcnkoJ1ZpZXdUd29TZXJ2aWNlJywgVmlld1R3b1NlcnZpY2UpXG5cbiAgICBmdW5jdGlvbiBWaWV3T25lU2VydmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlOiAnSGVsbG8gV29ybGQnXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBWaWV3VHdvU2VydmljZSgpIHtcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBnZXRUaXRsZTogZ2V0VGl0bGVcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlXG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGl0bGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0hlbGxvIGFuZ2luISBJXFwnbSB2aWV3Mi4nXG4gICAgICAgIH1cbiAgICB9XG59KSgpXG5cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ215QXBwLmNvbnRyb2xsZXInLCBbXG4gICAgJ215QXBwLmNvbnRyb2xsZXIudmlld0N0cmwnXG5dKVxuXG47XG4oZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnXG5cbiAgICBWaWV3T25lQ3RybC4kaW5qZWN0ID0gW1wiVmlld09uZVNlcnZpY2VcIl07XG4gICAgVmlld1R3b0N0cmwuJGluamVjdCA9IFtcIlZpZXdUd29TZXJ2aWNlXCIsIFwiJHN0YXRlXCJdO1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbXlBcHAuY29udHJvbGxlci52aWV3Q3RybCcsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignVmlld09uZUN0cmwnLCBWaWV3T25lQ3RybClcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1ZpZXdUd29DdHJsJywgVmlld1R3b0N0cmwpXG5cblxuICAgIGZ1bmN0aW9uIFZpZXdPbmVDdHJsKFZpZXdPbmVTZXJ2aWNlKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXNcbiAgICAgICAgdm0udGl0bGUgPSBWaWV3T25lU2VydmljZS50aXRsZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIFZpZXdUd29DdHJsKFZpZXdUd29TZXJ2aWNlLCAkc3RhdGUpIHtcbiAgICAgICAgdmFyIHZtID0gdGhpc1xuICAgICAgICB2bS50aXRsZSA9IFZpZXdUd29TZXJ2aWNlLmdldFRpdGxlKClcbiAgICAgICAgdm0uZ29iYWNrID0gZ29iYWNrXG5cbiAgICAgICAgZnVuY3Rpb24gZ29iYWNrKCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCd2aWV3MScpXG4gICAgICAgIH1cbiAgICB9XG59KSgpXG5cbmFuZ3VsYXIubW9kdWxlKFwibXlBcHAuY29udHJvbGxlclwiKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHskdGVtcGxhdGVDYWNoZS5wdXQoXCJ2aWV3MS5odG1sXCIsXCI8aDE+e3t2bS50aXRsZX19PC9oMT5cXG48cD48YSB1aS1zcmVmPVxcXCJ2aWV3MlxcXCI+dmlldzI8L2E+PC9wPlwiKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dChcInZpZXcyLmh0bWxcIixcIjxoMT57e3ZtLnRpdGxlfX08L2gxPlxcbjxwPjxidXR0b24gbmctY2xpY2s9XFxcInZtLmdvYmFjaygpXFxcIj5nb2JhY2s8L2J1dHRvbj48L3A+XCIpO31dKTsiLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdteUFwcC5zZXJ2aWNlJywgW1xuICAgICdteUFwcC5zZXJ2aWNlLnZpZXdTZXJ2aWNlJ1xuXSlcbiIsIjtcbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAuc2VydmljZS52aWV3U2VydmljZScsIFtdKVxuICAgICAgICAuZmFjdG9yeSgnVmlld09uZVNlcnZpY2UnLCBWaWV3T25lU2VydmljZSlcbiAgICAgICAgLmZhY3RvcnkoJ1ZpZXdUd29TZXJ2aWNlJywgVmlld1R3b1NlcnZpY2UpXG5cbiAgICBmdW5jdGlvbiBWaWV3T25lU2VydmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlOiAnSGVsbG8gV29ybGQnXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBWaWV3VHdvU2VydmljZSgpIHtcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBnZXRUaXRsZTogZ2V0VGl0bGVcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlXG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGl0bGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0hlbGxvIGFuZ2luISBJXFwnbSB2aWV3Mi4nXG4gICAgICAgIH1cbiAgICB9XG59KSgpXG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdteUFwcC5jb250cm9sbGVyJywgW1xuICAgICdteUFwcC5jb250cm9sbGVyLnZpZXdDdHJsJ1xuXSlcbiIsIjtcbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCdcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbXlBcHAuY29udHJvbGxlci52aWV3Q3RybCcsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignVmlld09uZUN0cmwnLCBWaWV3T25lQ3RybClcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1ZpZXdUd29DdHJsJywgVmlld1R3b0N0cmwpXG5cblxuICAgIGZ1bmN0aW9uIFZpZXdPbmVDdHJsKFZpZXdPbmVTZXJ2aWNlKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXNcbiAgICAgICAgdm0udGl0bGUgPSBWaWV3T25lU2VydmljZS50aXRsZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIFZpZXdUd29DdHJsKFZpZXdUd29TZXJ2aWNlLCAkc3RhdGUpIHtcbiAgICAgICAgdmFyIHZtID0gdGhpc1xuICAgICAgICB2bS50aXRsZSA9IFZpZXdUd29TZXJ2aWNlLmdldFRpdGxlKClcbiAgICAgICAgdm0uZ29iYWNrID0gZ29iYWNrXG5cbiAgICAgICAgZnVuY3Rpb24gZ29iYWNrKCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCd2aWV3MScpXG4gICAgICAgIH1cbiAgICB9XG59KSgpXG4iLCJhbmd1bGFyLm1vZHVsZShcIm15QXBwLmNvbnRyb2xsZXJcIikucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7JHRlbXBsYXRlQ2FjaGUucHV0KFwidmlldzEuaHRtbFwiLFwiPGgxPnt7dm0udGl0bGV9fTwvaDE+XFxuPHA+PGEgdWktc3JlZj1cXFwidmlldzJcXFwiPnZpZXcyPC9hPjwvcD5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJ2aWV3Mi5odG1sXCIsXCI8aDE+e3t2bS50aXRsZX19PC9oMT5cXG48cD48YnV0dG9uIG5nLWNsaWNrPVxcXCJ2bS5nb2JhY2soKVxcXCI+Z29iYWNrPC9idXR0b24+PC9wPlwiKTt9XSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
